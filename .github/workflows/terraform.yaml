name: 'Terraform Azure Deployment'

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.2.0

    - name: Terraform Format Check
      working-directory: ./terraform
      run: terraform fmt -check -recursive

    - name: Install Checkov
      run: pip install checkov

    - name: Run Checkov
      working-directory: ./terraform
      run: checkov -d .

    - name: Set up Azure authentication
      run: |
        echo "${{ secrets.AZURE_AD_CLIENT_ID }}" > client_id
        echo "${{ secrets.AZURE_AD_CLIENT_SECRET }}" > client_secret
        echo "${{ secrets.AZURE_SUBSCRIPTION_ID }}" > subscription_id
        echo "${{ secrets.AZURE_AD_TENANT_ID }}" > tenant_id

    - name: Terraform Init
      working-directory: ./terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
        TF_VAR_client_id: ${{ secrets.AZURE_AD_CLIENT_ID }}
        TF_VAR_client_secret: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_tenant_id: ${{ secrets.AZURE_AD_TENANT_ID }}
        TF_VAR_vm_admin_password: ${{ secrets.VM_ADMIN_PASSWORD }}
      run: terraform init

    - name: Terraform Plan
      working-directory: ./terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
        TF_VAR_client_id: ${{ secrets.AZURE_AD_CLIENT_ID }}
        TF_VAR_client_secret: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_tenant_id: ${{ secrets.AZURE_AD_TENANT_ID }}
        TF_VAR_vm_admin_password: ${{ secrets.VM_ADMIN_PASSWORD }}
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      working-directory: ./terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
        TF_VAR_client_id: ${{ secrets.AZURE_AD_CLIENT_ID }}
        TF_VAR_client_secret: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_tenant_id: ${{ secrets.AZURE_AD_TENANT_ID }}
        TF_VAR_vm_admin_password: ${{ secrets.VM_ADMIN_PASSWORD }}
      run: terraform apply -input=false tfplan

    - name: Install Ansible
      run: sudo apt-get update && sudo apt-get install -y ansible

    - name: Run Ansible Playbook
      env:
        ANSIBLE_PASSWORD: ${{ secrets.VM_ADMIN_PASSWORD }}
        ANSIBLE_HOST_KEY_CHECKING: 'False'
      run: ansible-playbook -i ./ansible/inventory.ini -e ansible_ssh_pass='{{ lookup("env", "ANSIBLE_PASSWORD") }}' ./ansible/ansible-playbook.yaml

    - name: Terraform Destroy
      if: failure() || always()
      working-directory: ./terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
        TF_VAR_client_id: ${{ secrets.AZURE_AD_CLIENT_ID }}
        TF_VAR_client_secret: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_tenant_id: ${{ secrets.AZURE_AD_TENANT_ID }}
        TF_VAR_vm_admin_password: ${{ secrets.VM_ADMIN_PASSWORD }}
      run: terraform destroy -auto-approve
